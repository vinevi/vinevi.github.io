{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/guides/anachronox/console-commands","result":{"data":{"page":{"__typename":"MdxPage","title":"Console Commands","slug":"/guides/anachronox/console-commands","excerpt":"Common Key combinations ALT+SHIFT+F10 to enable console, ~ to open\nCTRL+SHIFT+F10 to quit the game anytime (or F10 + ENTER) Movement exec qâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Console Commands\",\n  \"slug\": \"/guides/anachronox/console-commands\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, mdx(\"strong\", {\n    parentName: \"h2\"\n  }, \"Common\")), mdx(\"h3\", null, \"Key combinations\"), mdx(\"p\", null, \"ALT+SHIFT+F10 to enable console, ~ to open\\nCTRL+SHIFT+F10 to quit the game anytime (or F10 + ENTER)\"), mdx(\"h3\", null, \"Movement\"), mdx(\"p\", null, \"exec q2 \\u2014 Quake-style spectator camera preset (noclip, allows to fly around)\\nexec anox \\u2014 default third-person controls preset (reverts things back to normal)\\nnoclip \\u2014 walk through walls\"), mdx(\"h3\", null, \"Environment\"), mdx(\"p\", null, \"gl_drawflat 1 \\u2014 shows BSP geometry, the actual structure of the map, revealing invisible walls and such\\nr_fullbright 1 \\u2014 disables lighting\"), mdx(\"h3\", null, \"Misc\"), mdx(\"p\", null, \"battlewin \\u2014 win a battle instantly\\nquit \\u2014 exit the game (useful if ui breaks)\\nexec testjosh \\u2014 AI debug (switch between the AI view-modes by pressing F1-F4. From 0 to 3, 3 - shows everything.)\\nmodellist \\u2014 to track what models / actors are loaded on the level\\ncmdlist \\u2014 list commands\"), mdx(\"h2\", null, \"Debug\"), mdx(\"p\", null, \"invoke 1:86 \\u2014 shows the menu which allows to edit your party (add items, level up and etc)\\ninvoke 1:860 \\u2014 old debug menu\"), mdx(\"h2\", null, \"Maps\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"List all maps:\"), \"\\ncd maps\\ndir\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Minigames\"), \"\\nHive mission:\\nmap hivebay\\ninvoke 67:3096\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"\\nmap \\\"mapname\\\" \\u2014 warps you to the selected map (no brackets required)\\n\\n\")), mdx(\"h2\", null, mdx(\"strong\", {\n    parentName: \"h2\"\n  }, \"Advanced\")), mdx(\"h3\", null, \"Config presets\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"*exec\"), \" runs a config with a supplied name from \\\"anoxdata/configs\\\"*\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"example: \\\"exec anox\\\" runs \\\"anoxdata/configs/anox.cfg\\\"\")), mdx(\"h3\", null, \"Invoking events\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"*invoke\"), \" runs the event of the id supplied. The events can be global or local, they are stored in gamefiles of .ape extension. To find out event ids you can look through the decompiled scripts \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/AlpacaNox/Anachronox/tree/master/APE/Gameflow\"\n  }, \"here\"), \"*\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Invoke\"), \" is used a lot throughout the game for UI and any sorts of in-game events.\"), mdx(\"h3\", null, \"Running cinematics\"), mdx(\"p\", null, \"For a cinematic to play properly you would need the party to be at the map it is taking place at, otherwise the cinematic will still play but the environment won't match. \"), mdx(\"p\", null, \"Most script files already contain the map name in the name of their script file which helps to figure out where to play them. For example for the script file \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fortress2_detta_intro.s\"), \" the name of the map would be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fortress2\"), \".\"), mdx(\"h3\", null, \"Playing cinematics with the \\\"playscene\\\" console command\"), mdx(\"p\", null, \"To play a cinematic open the console and type in:\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"map \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"nameofthemap\"), \" \"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"extern \\\"playscene \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"cinematicnamehere\"), \"\\\"\")), mdx(\"p\", null, \"for example:\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"map black\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"extern \\\"playscene black_intro\\\"\"), \"\\nwill run the Main Menu Intro cinematic \\u2014 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"black_intro.s\")), mdx(\"h3\", null, \"Playing cinematics with Planet (in-game cinematic editor)\"), mdx(\"p\", null, \"Playing cinematics that way will show a lot of extra things on screen, you will be able to see how the cinematics were put together. This engine module was used to make all cutscenes in the game and left for modders to use. Similarly as for the previous approach you will need to first use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"map\"), \" command to load the proper environment.\"), mdx(\"p\", null, \"To play cinematic with Planet:\\nopen the console and type in:\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"map \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"nameofthemap\"), \" \"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"planet\"), \"\\nThis will run Planet. To be able to click on the buttons press the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TAB\"), \" key.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click on the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"File\"), \" button\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Type in the name of the script you would like to play\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click on the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Load\"), \" button\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Press \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"F5\"), \" to start playing the cinematic and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"F8\"), \" to stop\")), mdx(\"h3\", null, \"List of the script files\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"amb / ambi scripts are usually little scripts used to control environment on the maps, these are not really cinematics and are used for animating little scenes to play on a background\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"some cinematics are so huge that they were split on several script files and then chained together in-game\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://docs.google.com/spreadsheets/d/1KpVUunUhmbGUBiiijQQint6EEliXdiuI3FemJm7Po3E/edit?usp=sharing\"\n  }, \"A table with scripts from the game\"), \" (Google Sheets)\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/guides/anachronox/console-commands"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}